// 1.案例: 单调数列
// 判断数组是否具有单调性（单调递增或单调递减）

// 输入: [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]
// 输出: true

// 输入: [1,3,2]
// 输出: false

// 解析
// 题目要求我们确定数组是否具有单调性。我们可以先假设数组是单调增的，因此在每个位置A[i] <= A[i + 1]。
// 遍历一遍数组，检查在每一个i是否都有A[i] <= A[i + 1]。
// 类似地，如果数组是单调减的，那么每个位置A[i] >= A[i + 1]。

// 我们用dec和inc两个flag代表数组的单调性，遍历数组，判断每个位置上是否符合单调性(使用与或运算符)。
// 如果所有位置都符合，那么至少有一个flag始终为true，返回其中一种结果。
// 分析：时间复杂度O(n)，空间复杂度O(1)
package array

func isMonotonic(arr []int) bool {
	inc, dec := true, true
	for i, sl := 1, len(arr); i < sl; i++ {
		inc = inc && (arr[i-1] <= arr[i])
		dec = dec && (arr[i-1] >= arr[i])
	}

	return inc || dec
}
